<% if is_current_user?(@post.user) %>
  <%= render 'form' %>
<% else %>
  <%= render partial: 'display_info', locals: {post: @post} %>
<% end %>
<input id="new-comment-button" type="submit" value="Add New Comment" />
<div id="new-comment"></div>
<div class="comments"></div>
<%= button_to "Load Comments", post_comments_path(@post), {method: :get, form_class: "get-comments"} %>
<%= content_tag(:h3, "Volunteer Opportunities") unless @appointments.blank? %>
<%= render partial: 'appointments/post_appointment', collection: @appointments, as: :appointment %><br>
<% if is_current_user?(@post.user) %>
  <%= button_to "Create a new Appointment", new_post_appointment_path(@post), method: :get %><br>
  <%= button_to 'Delete Post', post_path(@post), method: :delete, data: { confirm: 'Are you sure?' } %>
<% end %>

<script id="comment-template" type="text/x-handlebars-template">
  <div class="comment-content">
    <h4>{{content}}</h4>
    <div class="comment-data">
      written by: <a href="/users/{{user.id}}">{{user.name}}</a>, last edited: {{updated_at}}
    </div>
    {{#if isCurrentUser }}
      <form action="/posts/<%=@post.id%>/comments/{{id}}" method="get" class="edit-comment-form">
        <input type="submit" value="Edit Comment" />
      </form>
    {{/if}}
  </div>
</script>
<script id="form-template" type="text/x-handlebars-template">
  <form action="/posts/<%=@post.id%>/comments{{#if id}}/{{id}}{{/if}}" method="post" class="{{#if id}}update{{else}}new{{/if}}-comment-form">
  <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
  <input type="hidden" name="comment[post_id]" value="<%= @post.id %>">
  <input type="hidden" name="comment[user_id]" value="<%= current_user %>">
  <label for='comment[content]'>content:</label>
  <textarea class="comment-content-text" name='comment[content]', cols="100", rows="10">{{content}}</textarea>
  <p><input class="{{#if id}}update{{else}}create{{/if}}" type="submit" value="{{#if id}}Update{{else}}Create{{/if}} Comment" /></p>
</script>

<% content_for :js do %>
  <script>
    class Comment {
      constructor(attributes = {}) {
        this.user = attributes.user
        this.content = attributes.content
        this.id = attributes.id
        this.post = attributes.post
        this.updated_at = attributes.updated_at
        this.isCurrentUser = this.checkUser()
      }
      checkUser(){
        return (this.user && this.user.id && parseInt(this.user.id) === parseInt(Comment.userID))
      }
      renderComment() {
        return Comment.template(this)
      }
      renderForm(){
        return Comment.formTemplate(this)
      }
    }
    Comment.getComments = function() {
      $.get(this.APIURL, (comments) => {
        if(comments.length) {
          this.commentsDiv.empty()
          this.renderCommentsDiv(comments)
        } else {
          this.commentsDiv.text("There are no comments for this post")
        }
      })
    }
    Comment.clearComments = function() {
      this.commentsDiv.empty()
    }
    Comment.addClearButton = function() {
      if(!$(".comments-clear").length){
        this.getCommentsForm.append(this.clearButtonHTML)
        this.clearButton = $(".comments-clear")
        this.clearButton.on("click", (e) => {
          e.preventDefault()
          this.clearComments()
          this.clearButton.remove()
        })
      }
    }
    Comment.renderCommentsDiv = function(comments){
      this.allComments = $(".comment-content")
      if(!this.allComments.length){this.clearComments()}
      comments.forEach((comment) => {
        this.commentsDiv.append(new this(comment).renderComment())
      })
      this.addClearButton()
      this.attachEditListeners()
    }
    Comment.attachEditListeners = () => {
      editForms = $(".edit-comment-form")
      editForms.on("submit", function(e) {
        e.preventDefault()
        editform = $(this)
        commentDiv = editform.parent()
        action = editform.attr("action")
        $.get(action, (comment) => {
          commentDiv.html(new Comment(comment).renderForm())
          Comment.attachUpdateListener(commentDiv.children()[0])
        })
      })
    }
    Comment.attachUpdateListener = (updateForm) => {
      $(updateForm).on("submit", (e) => {
        e.preventDefault()
        let updateAction = $(updateForm).attr("action")
        let updateData = $(updateForm).serialize()
        $.ajax({
          type: 'PATCH',
          url: updateAction,
          data: updateData
        }).success((comment) => {
          console.log(comment)
          $(updateForm).parent().html(new Comment(comment).renderComment())
        })
      })
    }
    Comment.newCommentForm = function() { 
      this.newCommentDiv.html(new Comment().renderForm())
      this.newForm = $(".new-comment-form") //created above ^
      this.newForm.on("submit", (e) => {
        e.preventDefault()
        this.saveComment()
      })
    }
    Comment.saveComment = function() {
      let action = this.newForm.attr("action")
      let formData = this.newForm.serialize()
      $.post(action, formData, (comment) => {
        this.renderCommentsDiv([comment])
      })
      this.newCommentDiv.empty()
    }
    Comment.renderTemplates = function(){
      this.template = Handlebars.compile(document.getElementById("comment-template").innerHTML)
      this.formTemplate = Handlebars.compile(document.getElementById("form-template").innerHTML)
      this.clearButtonHTML = "<input class=\"comments-clear\" type=\"submit\" value=\"Clear Comments\"></input>"
    }
    Comment.renderAttributes = function(){
      this.userID = $(".user-link").attr("href").slice(-1)
      this.getCommentsForm = $('.get-comments')
      this.newCommentDiv = $('#new-comment')
      this.newCommentButton = $('#new-comment-button')
      this.APIURL = this.getCommentsForm.attr("action") // '/posts/:id/comments'
      this.commentsDiv = $(".comments")
      let digit = new RegExp("(\\d)") 
      this.postID = this.APIURL.split(digit)[1] // the id from the above url
    }
    $(
      function() {
        Comment.renderTemplates()
        Comment.renderAttributes()
        Comment.newCommentButton.on("click", function(){
          Comment.newCommentForm()
        })
        Comment.getCommentsForm.on("submit", function(e){
          e.preventDefault()
          Comment.getComments()
        })
      }
    )
  </script>
<% end %>